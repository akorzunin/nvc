{
  "main name": {
    "prefix": "name",
    "body": ["if __name__ == '__main__':"],
    "description": "Python contruction"
  },
  "class snip": {
    "prefix": "class",
    "body": [
      "class ${1:label}(object): ",
      "    '''docstring for ${1:label}'''",
      "    def __init__(self, ):",
      "        super().__init__()"
    ],
    "description": "Python contruction"
  },
  "import pd": {
    "prefix": "pd",
    "body": ["import pandas as pd"]
  },
  "import np": {
    "prefix": "np",
    "body": ["import numpy as np"]
  },
  "load .env": {
    "prefix": "env",
    "body": [
      "#load .env variables",
      "import os",
      "from dotenv import load_dotenv",
      "load_dotenv()"
    ]
  },
  "envvar": {
    "prefix": "varenv",
    "body": ["${1:label} = os.getenv('${1:label}')"]
  },
  "path_insert": {
    "prefix": "path_insert",
    "body": ["import sys", "sys.path.insert(1, '${1:label}')"]
  },
  "logging": {
    "prefix": "logging",
    "body": [
      "import logging",
      "DEBUG = __debug__ ",
      "LOG_FILE_NAME = '${1:log_file_name}.log'",
      "format = '%(asctime)s [%(levelname)s]: %(message)s'",
      "logger = logging.basicConfig(",
      "    filename=LOG_FILE_NAME if not DEBUG else None, ",
      "    format=format,",
      "    encoding='utf-8', ",
      "    level=logging.DEBUG, ",
      ")",
      "if not DEBUG:",
      "    logging.getLogger(logger).addHandler(logging.StreamHandler())"
    ]
  },
  "property_ro": {
    "prefix": "ro_property",
    "body": [
      "@property",
      "def ${1:label}(self):",
      "    return self._${1:label}"
    ]
  },
  "async_debug": {
    "prefix": "async_debug",
    "body": [
      "import asyncio",
      "loop = asyncio.get_event_loop()",
      "async def bar():",
      "    await ${1:body}",
      "loop.run_until_complete(bar())"
    ]
  },
  "async_debug_bot": {
    "prefix": "async_debug_bot",
    "body": [
      "import asyncio",
      "loop = bot.loop",
      "async def bar():",
      "    await ${1:body}",
      "loop.run_until_complete(bar())"
    ]
  },
  "async_def": {
    "prefix": "asd",
    "body": ["async def ${1:label}(${2:args}):", "    ${3:body}"]
  },
  "discord_slash_command": {
    "prefix": "dsc",
    "body": [
      "@app_commands.command(name='${1:name}', description='${2:desc}')",
      "@app_commands.describe(${3:params})",
      "async def slash_${4:func}(self, interaction: discord.Interaction, ${5:args}):",
      "    ctx = await self.get_ctx(interaction)",
      "    ${6:body}",
      "    await interaction.followup.send(content=$7)"
    ]
  },
  "class_pydantic": {
    "prefix": "class_pydantic",
    "body": ["class ${1:class_name}(BaseModel):", "    ${2:body}"]
  },
  "plotly go": {
    "prefix": "go",
    "body": ["import plotly.graph_objects as go"]
  },
  "plotly px": {
    "prefix": "px",
    "body": ["import plotly.express as px"]
  },
  "datetime": {
    "prefix": "dt",
    "body": ["from datetime import datetime"]
  },
  "widget": {
    "prefix": "widgets",
    "body": ["import ipywidgets as widgets"]
  },
  "autoreload": {
    "prefix": "autoreload",
    "body": ["%load_ext autoreload", "%autoreload 2"]
  },
  "test_": {
    "prefix": "ptest",
    "body": ["def test_${1:name}() -> None:", "    $2"]
  },
  "pickle read": {
    "prefix": "pread",
    "body": [
      "import pickle",
      "with open('$1', 'rb') as f:",
      "    $2 = pickle.load(f)"
    ]
  },
  "json save": {
    "prefix": "jsonsave",
    "body": [
      "import json",
      "with open('${1:path_or_filename}', 'w', encoding='utf-8') as f:",
      "    json.dump(${2:object_to_save}, f, ensure_ascii=False)"
    ]
  },
  "json read": {
    "prefix": "jsonread",
    "body": [
      "import json",
      "with open('${6:path_or_filename}', 'r', encoding='utf-8') as f:",
      "    ${6:var_w_file_content} = json.load(f)"
    ]
  },
  "pickle save": {
    "prefix": "psave",
    "body": [
      "import pickle",
      "with open('$1', 'wb') as f:",
      "    pickle.dump($2, f)"
    ]
  },
  "pprint": {
    "prefix": "pp",
    "body": ["from pprint import pprint", "pprint($1)"]
  },
  "todo me": {
    "prefix": "tdm",
    "body": ["# TODO avkorz "]
  },
  "pytest enable stdout": {
    "prefix": "pytest_stdout",
    "description": "Enable print function in debug consoe while debugging w/pytest",
    "body": [
      "# put capsys into test func arg",
      "with capsys.disabled():",
      "    $1"
    ]
  },
  "log info": {
    "prefix": "loginfo",
    "body": ["logging.info(f'{$1=}')"]
  }
}
